package com.vyako.smartfactory.main.models.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEMO".
*/
public class DemoDao extends AbstractDao<Demo, Long> {

    public static final String TABLENAME = "DEMO";

    /**
     * Properties of entity Demo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Coloum1 = new Property(1, String.class, "coloum1", false, "COLOUM1");
        public final static Property Coloum2 = new Property(2, String.class, "coloum2", false, "COLOUM2");
        public final static Property Coloum3 = new Property(3, String.class, "coloum3", false, "COLOUM3");
        public final static Property Coloum4 = new Property(4, String.class, "coloum4", false, "COLOUM4");
        public final static Property Coloum5 = new Property(5, String.class, "coloum5", false, "COLOUM5");
    }


    public DemoDao(DaoConfig config) {
        super(config);
    }
    
    public DemoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEMO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COLOUM1\" TEXT," + // 1: coloum1
                "\"COLOUM2\" TEXT," + // 2: coloum2
                "\"COLOUM3\" TEXT," + // 3: coloum3
                "\"COLOUM4\" TEXT," + // 4: coloum4
                "\"COLOUM5\" TEXT);"); // 5: coloum5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEMO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Demo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coloum1 = entity.getColoum1();
        if (coloum1 != null) {
            stmt.bindString(2, coloum1);
        }
 
        String coloum2 = entity.getColoum2();
        if (coloum2 != null) {
            stmt.bindString(3, coloum2);
        }
 
        String coloum3 = entity.getColoum3();
        if (coloum3 != null) {
            stmt.bindString(4, coloum3);
        }
 
        String coloum4 = entity.getColoum4();
        if (coloum4 != null) {
            stmt.bindString(5, coloum4);
        }
 
        String coloum5 = entity.getColoum5();
        if (coloum5 != null) {
            stmt.bindString(6, coloum5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Demo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coloum1 = entity.getColoum1();
        if (coloum1 != null) {
            stmt.bindString(2, coloum1);
        }
 
        String coloum2 = entity.getColoum2();
        if (coloum2 != null) {
            stmt.bindString(3, coloum2);
        }
 
        String coloum3 = entity.getColoum3();
        if (coloum3 != null) {
            stmt.bindString(4, coloum3);
        }
 
        String coloum4 = entity.getColoum4();
        if (coloum4 != null) {
            stmt.bindString(5, coloum4);
        }
 
        String coloum5 = entity.getColoum5();
        if (coloum5 != null) {
            stmt.bindString(6, coloum5);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Demo readEntity(Cursor cursor, int offset) {
        Demo entity = new Demo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coloum1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coloum2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coloum3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coloum4
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // coloum5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Demo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setColoum1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColoum2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColoum3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColoum4(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColoum5(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Demo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Demo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Demo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
